namespace = movement_interference_subtle

# varname interference_subtle
# displayName Subtle Interference 
# desc  
# policyCategory interference
# policyOption interference_subtle
# description 
# ethicAdjective 
# picture surrender 
# rebellionEthics 
# supportingEthics []
# potential always = yes

# Called on monthly pulse
event = {
	id = movement_interference_subtle.1
	
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		every_playable_country = {
			set_variable = { which = movement_interference_subtle_support value = 0}
			set_variable = { which = movement_interference_subtle_radicalism value = 0}
		
			if = {
				limit = {
					always = yes
					NOT = { has_policy_flag = interference_subtle }
				}
				set_country_flag = suppress_vanilla_factions
				country_event = { id = movement_interference_subtle.2 }
			}
		}
	}
}

# Calculate support and radicalism by combining faction and numerical support
# Outputs:
# - country.movement_interference_subtle_support
# - country.movement_interference_subtle_radicalism
# - country.movement_interference_subtle_inertia
country_event = {
	id = movement_interference_subtle.2

	hide_window = yes
	is_triggered_only = yes

	immediate = {
		
		calculate_interference_subtle_movement_inertia = {
			INERTIA = movement_interference_subtle_inertia
		}

		if = {
			limit = {
				always = yes
				check_variable = {which = movement_interference_subtle_inertia value > 100 }
				NOR = { 
					has_country_flag = movement_for_interference_subtle  
					has_country_flag = interference_subtle_revolt
				}
			}	
			start_situation = {
				type = situation_movement_interference_subtle
				target = root
			}
		}	
	}
}

# Create a revolution
situation_event = {
	id = movement_interference_subtle.6
	title = movement_interference_subtle.6.title
	desc = movement_interference_subtle.6.desc
	picture = GFX_evt_night_raid
	is_triggered_only = yes
	hide_window = no

	immediate = {
		set_variable = { which = interference_subtle_largest_planet_inertia value = 0}
		OWNER = {
			set_country_flag = interference_subtle_revolt
			every_owned_planet = {
				set_variable = { which = interference_subtle_planet_inertia value = 0}
				
				every_owned_pop = {
					
					# A perfectly happy pop has happiness 1, and unhappy 0. An perfectly unhappy pop in thise case provides 1 radicalism support whereas his happy cousin contributes none.
					export_modifier_to_variable = { modifier = pop_happiness variable = pop_happiness }
					change_variable = { which = pop_happiness value = 0.5 }

					export_modifier_to_variable = { modifier = pop_political_power variable = pop_political_power }
					change_variable = { which = pop_political_power value = 0.5 }
					
					set_variable = {which = pop_interference_subtle_radicalism value = 1}
					subtract_variable = { which = pop_interference_subtle_radicalism value = pop_happiness }
					
					set_variable = { which = interference_subtle_pop_inertia value = pop_political_power }
					multiply_variable = { which = interference_subtle_pop_inertia value = pop_interference_subtle_radicalism }
					log = "Planet [Prev.GetName] - Pop Happiness: [This.pop_happiness] Political Power: [This.pop_political_power] Inertia: [This.interference_subtle_pop_inertia]"

					if = {
						limit = {
							NOR = {
								
							}
						}
						multiply_variable = { which = interference_subtle_pop_inertia value = -1 }
					}
					PREV = {
						change_variable = { which = interference_subtle_planet_inertia value = PREV.interference_subtle_pop_inertia }
					}
				}
				log = "Total Planet [This.GetName] revolt inertia: [This.interference_subtle_planet_inertia]"
				if = {
					limit = {
						check_variable = { which = interference_subtle_planet_inertia value > ROOT.interference_subtle_largest_planet_inertia }
					}
					save_event_target_as = interference_subtle_revolting_capital
					ROOT = {
						set_variable = { which = interference_subtle_largest_planet_inertia value = PREV.interference_subtle_planet_inertia }
					}
				}
			}
		}
		log = "Revolt Chosen Capital: [event_target:interference_subtle_revolting_capital.GetName]"
		event_target:interference_subtle_revolting_capital = {
			random_owned_species = {
				save_event_target_as = interference_subtle_revolting_species
			}
			create_rebels = {
				name = random
				ethos = random
				authority = random
				civics = random
				origin = "origin_separatists"
				species = event_target:interference_subtle_revolting_species
				flag = random
				effect = {
					save_event_target_as = rebel_empire
					set_country_type = default
					establish_communications_no_message = root.owner
		
					event_target:interference_subtle_revolting_capital = { #Flip the target planet
						set_owner = event_target:rebel_empire
			
						solar_system = {
							if = {
								limit = { exists = starbase }
								starbase = {
									if = {
										limit = {
											is_owned_by = root.owner
										}
										set_owner = event_target:rebel_empire
										if = {
											limit = { has_starbase_size = starbase_outpost }
											set_starbase_size = starbase_starport
											set_starbase_module = {
												slot = 1
												module = shipyard
											}
											set_starbase_module = {
												slot = 2
												module = shipyard
											}
										}
										else_if = {
											limit = {
												NOT = { has_starbase_module = shipyard }
											}
											set_starbase_module = {
												slot = 1
												module = shipyard
											}
											set_starbase_module = {
												slot = 2
												module = shipyard
											}
										}
									}
								}
							}
							else = {
								create_starbase = {
									size = starbase_starport
									module = shipyard
									module = shipyard
									owner = event_target:rebel_empire
								}
							}
							add_claims = {
								who = root.owner
								show_notification = no
							}

							every_system_planet = {
								limit = {
									is_colony = yes
									NOT = { is_same_value = event_target:rebel_planet }
									is_owned_by = root.owner
								}
								set_owner = event_target:rebel_empire
							}
							every_fleet_in_system = {
								limit = {
									is_owned_by = root.owner
									can_go_mia = yes
								}
								set_mia = mia_return_home
							}
						}
					}
					set_policy = { 
						policy = interference 
						option = interference_subtle 
						cooldown = yes 
					}
					add_resource = {
						minerals = 15000
						energy = 15000
						food = 15000
						consumer_goods = 10000
						alloys = 10000
						rare_crystals = 1000
						volatile_motes = 1000
						exotic_gases = 1000
						influence = 1000
						unity = 10000
					}

					root.owner = {
						every_owned_planet = { #Flip the additional joiner planets
							limit = {
								check_variable = { which = interference_subtle_planet_inertia value > 0}
								
								OR = {
									NOT = { exists = starbase }
									starbase = { is_owned_by = root.owner }
								}
								has_ground_combat = no
								has_orbital_bombardment = no
							}
							if = { #if you check this in the original limit of every_owned_planet, it calcs it before the loop is executed. Which means it will set the owner of the system twice if there are two colonies in the system.
								limit = {
									exists = controller
									controller = { is_same_value = root.owner }
								}
								set_variable = { which = interference_subtle_planet_inertia value = 0}
								set_owner = event_target:rebel_empire
		
								solar_system = {
									if = {
										limit = { exists = starbase }
										starbase = { set_owner = event_target:rebel_empire }
									}
									add_claims = {
										who = root.owner
										show_notification = no
									}
									every_system_planet = {
										limit = {
											is_colony = yes
											NOT = { is_same_value = prevprev }
											is_owned_by = root.owner
										}
										set_owner = event_target:rebel_empire
									}
									every_fleet_in_system = {
										limit = {
											is_owned_by = root.owner
											can_go_mia = yes
										}
										set_mia = mia_return_home
									}
								}
							}
						}
					}
					every_system_within_border = { #Add a few systems
						every_neighbor_system = {
							limit = {
								exists = owner
								owner = { is_same_value = root.owner }
								exists = starbase
								NOR = {
									starbase = {
										OR = {
											is_starbase_type = sfortress
											NOT = { is_owned_by = root.owner }
										}
									}
									any_system_planet = {
										is_colony = yes
									}
								}
							}
							starbase = { set_owner = event_target:rebel_empire }
							add_claims = {
								who = root.owner
								show_notification = no
							}
							every_fleet_in_system = {
								limit = {
									is_owned_by = root.owner
									can_go_mia = yes
								}
								set_mia = mia_return_home
							}
						}
					}
					while = { #Get rid of bordergore systems
						limit = { #Note: system_within_border caching is quite funky at a time like this when many borders are changing hands. The starbase ownership is checked to be extra sure, since it is not cached (unlike system ownership - though that probably would have worked too)
							root.owner = {
								any_system_within_border = {
									exists = starbase
									starbase.owner = { is_same_value = prevprev }
									count_neighbor_system = {
										count >= 2
										limit = {
											exists = starbase.owner
											starbase.owner = {
												is_same_value = event_target:rebel_empire
											}
										}
									}
									NOR = {
										starbase = { is_starbase_type = sfortress }
										any_system_planet = {
											is_colony = yes
										}
									}
								}
							}
						}
						root.owner = {
							every_system_within_border = {
								limit = {
									exists = starbase
									starbase.owner = { is_same_value = prevprev }
									count_neighbor_system = {
										count >= 2
										limit = {
											exists = starbase.owner
											starbase.owner = {
												is_same_value = event_target:rebel_empire
											}
										}
									}
									NOR = {
										starbase = { is_starbase_type = sfortress }
										any_system_planet = {
											is_colony = yes
										}
									}
								}
								starbase = {
									set_owner = event_target:rebel_empire
								}
								add_claims = {
									who = root.owner
									show_notification = no
								}
								every_fleet_in_system = {
									limit = {
										is_owned_by = root.owner
										can_go_mia = yes
									}
									set_mia = mia_return_home
								}
							}
						}
					}	
					
					
					change_government = {
						authority = random
						civics = random
					}
					create_leader = {
						class = random_ruler
						species = owner_main_species
						name = random
						skill = 5
						effect = {
							event_target:rebel_empire = { assign_leader = prev }
							# add_random_leader_trait = yes
							# add_random_leader_trait = yes
						}
					}
					
					create_fleet_from_naval_cap = 2
					declare_war = {
						target = Root.Owner
						name = "Civil War over Subtle Interference"
						attacker_war_goal = wg_conquest
					}
				}
			}
		}
		destroy_situation = this
	}
	option = {
		name = movement_interference_subtle.6.fight
	}
	option = {
		name = movement_interference_subtle.6.join
		event_target:rebel_empire = {
			set_player = root.owner
		}
	}
}
