namespace = situation_passPolicy_{{varname}}
country_event = {
	id = situation_passPolicy_{{varname}}.1
	title = situation_passPolicy_{{varname}}.1.name
	desc = situation_passPolicy_{{varname}}.1.desc
	picture = GFX_evt_{{picture}}
	
	show_sound = {
		sound = advisor_notification_planet_in_revolt
		sound_is_advisor = yes
	}
	
	location = root
	is_triggered_only = yes
	situation = event_target:new_situation

	immediate = {
		owner = {
			start_situation = {
				type = situation_passPolicy_{{varname}}
				target = root
				effect = {
					save_event_target_as = new_situation
				}
			}
		}
	}

	option = {
		name = passPolicy_ack

		tooltip = {
			owner = {
				start_situation = {
					type = situation_passPolicy_{{varname}}
					target = root
				}
			}
		}
	}
}

# Determine advance fail or stall
situation_event = {
	id = situation_passPolicy_{{varname}}.2	
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				NOT = {
					is_variable_set = setback_count
				}
			}
			set_variable = { which = setback_count value = 0}
		}
		if = {
			limit = {
				NOT = {
					is_variable_set = swayed_to_support
				}
			}
			set_variable = { which = swayed_to_support value = 0}
		}
		if = {
			limit = {
				NOT = {
					is_variable_set = swayed_to_detract
				}
			}
			set_variable = { which = swayed_to_detract value = 0}
		}
		set_variable = { which = faction_support value = 0}
		set_variable = { which = faction_detraction value = 0}
	
		OWNER = {
			every_pop_faction = {
				{% for supportingFaction in supportingFactions %}
				if = {
					limit = {
						is_pop_faction_type = {{supportingFaction}}
					}
					export_trigger_value_to_variable = { trigger = support variable = {{supportingFaction}}_support }
					multiply_variable = {which = {{supportingFaction}}_support value = 100}
					ROOT = {
						change_variable = { which = faction_support value = PREV.{{supportingFaction}}_support }		
					}
				}
				{% endfor %}
				{% for detractingFaction in detractingFactions %}
				if = {
					limit = {
						is_pop_faction_type = {{detractingFaction}}
					}
					export_trigger_value_to_variable = { trigger = support variable = {{detractingFaction}}_support }
					multiply_variable = {which = {{detractingFaction}}_support value = 100}
					ROOT = {
						change_variable = { which = faction_detraction value = PREV.{{detractingFaction}}_support }	
					}
				}
				{% endfor%}
			}
		}

		set_variable = {which = faction_ambivalence value = 100}
		subtract_variable = { which = faction_ambivalence value = faction_support }
		subtract_variable = { which = faction_ambivalence value = faction_detraction }
		
		# log = "PRE MATH: {{varname}} support: [THIS.faction_support]+[THIS.swayed_to_support] detraction: [THIS.faction_detraction]+[THIS.swayed_to_detract]"	

		# If swayed is positive, give it support, if negative, give it to detraction
		
		change_variable = { which = faction_support value = swayed_to_support }
		change_variable = { which = faction_detraction value = swayed_to_detract }
		

		# Clamp variables
		if = {
			limit = {
				check_variable = { which = faction_support value > 100}
			}
			set_variable = { which = faction_support value = 100}
		}
		if = {
			limit = {
				check_variable = { which = faction_support value < 0}
			}
			set_variable = { which = faction_support value = 0}
		}
		
		if = {
			limit = {
				check_variable = { which = faction_detraction value > 100}
			}
			set_variable = { which = faction_detraction value = 100}
		}
		if = {
			limit = {
				check_variable = { which = faction_detraction value < 0}
			}
			set_variable = { which = faction_detraction value = 0}
		}

		set_variable = {which = faction_ambivalence value = 100}
		subtract_variable = { which = faction_ambivalence value = faction_support }
		subtract_variable = { which = faction_ambivalence value = faction_detraction }

		if = {
			limit = {
				check_variable = { which = faction_ambivalence value > 100}
			}
			set_variable = { which = faction_ambivalence value = 100}
		}
		if = {
			limit = {
				check_variable = { which = faction_ambivalence value < 0}
			}
			set_variable = { which = faction_ambivalence value = 0}
		}


		ceiling_variable = faction_support
		ceiling_variable = faction_detraction
		ceiling_variable = faction_ambivalence
		# log = "POST MATH: {{varname}} support: [THIS.faction_support] detraction: [THIS.faction_detraction] ambivalence: [THIS.faction_ambivalence]"	
	}
}
# Decide whether or not to roll
situation_event = {
	id = situation_passPolicy_{{varname}}.3
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		# Update all values
		situation_event = {
			id = situation_passPolicy_{{varname}}.2	
		}
		set_variable_to_random_value = { which = advancement_roll min = 0 max = 100 rounded = yes}
		# log = "Rolled: [THIS.advancement_roll] [THIS.faction_support]:[THIS.faction_detraction]:[THIS.faction_ambivalence]"
		if = {
			limit = {
				check_variable = { which = advancement_roll value < faction_support  }
			}
			# Advance!
			situation_event = { id = situation_passPolicy_{{varname}}.4}
		}
		else = {
			subtract_variable = { which = advancement_roll value = faction_support }
			if = {
				limit = {
					check_variable = { which = advancement_roll value < faction_detraction }
				}
				# Fail!
				situation_event = {id = situation_passPolicy_{{varname}}.5}
			}
			else = {
				# Ambivalence!
				situation_event = {id = situation_passPolicy_{{varname}}.6}
			}
		}	
	}
}

# Advance
situation_event = {
	id = situation_passPolicy_{{varname}}.4
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		# log = "{{varname}} success!"
		add_situation_progress = 34
	}
}
# Fail
situation_event = {
	id = situation_passPolicy_{{varname}}.5
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		change_variable = { which = setback_count value = 1 }
		# log = "{{varname}} fail! [this.setback_count]/3"
		if = {
			limit = { check_variable = { which = setback_count value = 3}}
			# log = "{{varname}} failed due to setbacks [this.setback_count]/3!"
			situation_event = { id = situation_passPolicy_{{varname}}.9}
		}
	}
}

# Ambivalent
situation_event = {
	id = situation_passPolicy_{{varname}}.6
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		if = {
			limit = {
				check_variable = { which = faction_ambivalence value > 10}
			}
			set_variable_to_random_value = { which = sway_roll min = 0 max = 100 rounded = yes}
			if = {
				limit = {
					check_variable = { which = sway_roll value > 50 }
				}
				# log = "{{varname}} ambivalent! Rolled [THIS.sway_roll]. Giving 10 ambivalence support."
				change_variable = { which = swayed_to_support value = 10}
			}
			else = {
				# log = "{{varname}} ambivalent! Rolled [THIS.sway_roll]. Giving 10 ambivalence detraction."
				change_variable = { which = swayed_to_detract value = 10}
			}
			situation_event = {id = situation_passPolicy_{{varname}}.2 }
		}
		else = {
			# log = "{{varname}} ambivalent! No ambivalence to give at [THIS.faction_ambivalence]."
		}
	}
}

# Success
situation_event = {
	id = situation_passPolicy_{{varname}}.7
	title = situation_passPolicy_{{varname}}.7.name
	desc = situation_passPolicy_{{varname}}.7.desc
	picture = GFX_evt_{{picture}}
	
	is_triggered_only = yes
	immediate = {
		owner = {
			set_policy = { 
				policy = {{policyCategory}} 
				option = {{policyOption}} 
				cooldown = yes 
			}
		}
		destroy_situation = this
	}
	option = {
		name = situation_passPolicy_{{varname}}.7.a
	}
}
# Failure due to abort
situation_event = {
	id = situation_passPolicy_{{varname}}.8
	title = situation_passPolicy_{{varname}}.8.name
	desc = situation_passPolicy_{{varname}}.8.desc
	picture = GFX_evt_{{picture}}
	
	is_triggered_only = yes

	immediate = {
		destroy_situation = this
	}
	option = {
		name = situation_passPolicy_{{varname}}.8.a
	}
}
# Failure due to setbacks
situation_event = {
	id = situation_passPolicy_{{varname}}.9
	title = situation_passPolicy_{{varname}}.9.name
	desc = situation_passPolicy_{{varname}}.9.desc
	picture = GFX_evt_{{picture}}
	
	is_triggered_only = yes
	immediate = {
		destroy_situation = this
	}
	
	option = {
		name = situation_passPolicy_{{varname}}.9.a
	}
}